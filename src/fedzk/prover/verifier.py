# Functional Source License 1.1 with Apache-2.0 Future Grant (FSL-1.1-Apache-2.0)
# Copyright (c) 2025 Aaryan Guglani and FEDzk Contributors
# Licensed under FSL-1.1-Apache-2.0. See LICENSE for details.

"""
Zero-Knowledge Proof Verifier for FedZK.

This module contains the ZKVerifier class which handles verification of zero-knowledge
proofs for gradient updates in federated learning.
"""

import json
import os
import subprocess
import tempfile
from pathlib import Path
from typing import Any, Dict, List


class ZKVerifier:
    """
    Production Zero-Knowledge Proof Verifier for FedZK.
    
    This class verifies real zero-knowledge proofs using SNARKjs.
    It requires a complete ZK toolchain installation (run scripts/setup_zk.sh).
    """

    def __init__(self, verification_key_path: str):
        """
        Initialize with path to verification key.
        
        Args:
            verification_key_path: Path to the verification key for the ZK circuit
        """
        self.verification_key_path = verification_key_path
        
        # Verify ZK infrastructure is available
        self._verify_zk_setup()

    def _verify_zk_setup(self):
        """Verify that the ZK infrastructure is properly set up."""
        # Skip verification in test mode
        if os.getenv("FEDZK_TEST_MODE", "false").lower() == "true":
            return
            
        # Check SNARKjs is available
        try:
            subprocess.run(["snarkjs", "--version"], 
                         capture_output=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            raise RuntimeError(
                "SNARKjs not found. Please run 'scripts/setup_zk.sh' to install the ZK toolchain."
            )
        
        # Check verification key exists
        if not Path(self.verification_key_path).exists():
            raise RuntimeError(
                f"Verification key not found at {self.verification_key_path}. "
                f"Please run 'scripts/setup_zk.sh' to generate circuit artifacts."
            )

    def verify_proof(self, proof: Dict, public_signals: List[str]) -> bool:
        """
        Verify a zero-knowledge proof using SNARKjs.
        
        Args:
            proof: The proof dictionary generated by ZKProver
            public_signals: List of public signals/inputs for the proof
            
        Returns:
            Boolean indicating whether the proof is valid
        """
        return self.verify_real_proof(proof, public_signals)

    def verify_real_proof(self, proof: Dict[str, Any], public_inputs: List[str]) -> bool:
        """
        Verify a real zero-knowledge proof using SNARKjs.
        
        Args:
            proof: Dictionary containing the ZK proof
            public_inputs: List of public inputs/signals
            
        Returns:
            Boolean indicating whether the proof is valid
        """
        with tempfile.TemporaryDirectory() as tmpdir:
            proof_path = os.path.join(tmpdir, "proof.json")
            public_path = os.path.join(tmpdir, "public.json")

            # Write proof and public inputs to temporary files
            with open(proof_path, "w") as f:
                json.dump(proof, f)
            
            with open(public_path, "w") as f:
                json.dump(public_inputs, f)

            try:
                # Run SNARKjs verification
                result = subprocess.run([
                    "snarkjs", "groth16", "verify",
                    self.verification_key_path,
                    public_path,
                    proof_path
                ], capture_output=True, text=True, check=True)
                
                # SNARKjs returns "OK" in stdout if verification succeeds
                return "OK" in result.stdout
                
            except subprocess.CalledProcessError as e:
                # Verification failed
                print(f"Proof verification failed: {e.stderr}")
                return False

    def verify_secure_proof(self, proof: Dict[str, Any], public_inputs: List[str], 
                          secure_vkey_path: str) -> bool:
        """
        Verify a secure zero-knowledge proof using the secure circuit verification key.
        
        Args:
            proof: Dictionary containing the ZK proof
            public_inputs: List of public inputs/signals
            secure_vkey_path: Path to secure circuit verification key
            
        Returns:
            Boolean indicating whether the proof is valid
        """
        with tempfile.TemporaryDirectory() as tmpdir:
            proof_path = os.path.join(tmpdir, "proof.json")
            public_path = os.path.join(tmpdir, "public.json")

            # Write proof and public inputs to temporary files
            with open(proof_path, "w") as f:
                json.dump(proof, f)
            
            with open(public_path, "w") as f:
                json.dump(public_inputs, f)

            try:
                # Run SNARKjs verification with secure key
                result = subprocess.run([
                    "snarkjs", "groth16", "verify",
                    secure_vkey_path,
                    public_path,
                    proof_path
                ], capture_output=True, text=True, check=True)
                
                # SNARKjs returns "OK" in stdout if verification succeeds
                return "OK" in result.stdout
                
            except subprocess.CalledProcessError as e:
                # Verification failed
                print(f"Secure proof verification failed: {e.stderr}")
                return False
