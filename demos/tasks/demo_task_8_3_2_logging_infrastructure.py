#!/usr/bin/env python3
"""
FEDzk Logging Infrastructure Demo
==================================

Demonstrates the comprehensive logging infrastructure with:
- Structured JSON logging
- Log aggregation and analysis
- Security and compliance logging
- Audit trail generation
"""

import sys
import json
import time
import logging
from datetime import datetime
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

try:
    from fedzk.logging.structured_logger import (
        FEDzkLogger, FEDzkJSONFormatter, FEDzkSecurityFormatter,
        get_logger, initialize_logging
    )
    from fedzk.logging.log_aggregation import (
        LogAggregator, ElasticsearchLogShipper,
        get_log_pipeline, initialize_log_aggregation
    )
    from fedzk.logging.security_compliance import (
        SecurityEventLogger, AuditLogger, SecurityEventType,
        ComplianceStandard, DataClassification,
        get_security_logger, get_audit_logger,
        log_authentication_event, log_audit_change
    )
    LOGGING_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("Some logging dependencies may not be available.")
    LOGGING_AVAILABLE = False


def demo_structured_logging():
    """Demonstrate structured JSON logging"""
    print("üìù DEMO: Structured JSON Logging")
    print("=" * 50)

    if not LOGGING_AVAILABLE:
        print("‚ö†Ô∏è  Structured logging not available - using mock demonstration")
        demo_mock_structured_logging()
        return

    # Initialize logger
    logger = FEDzkLogger("fedzk-demo", "INFO")

    print("‚úÖ Initialized FEDzk structured logger")

    # Log various types of messages
    logger.logger.info("Application started", extra={"structured_data": {"version": "1.0.0"}})

    # Log with request context
    logger.set_request_context(request_id="req-12345", user_id="user-67890")
    logger.log_structured("info", "Processing user request",
                         {"action": "login", "method": "POST"})

    # Log performance metrics
    logger.log_performance_metric("database_query", 0.245, True,
                                 {"query_type": "SELECT", "table": "users"})

    # Log security event
    logger.log_security_event("authentication_success", "low",
                            {"method": "jwt", "user_id": "user-67890"})

    # Log audit event
    logger.log_audit_event("USER_LOGIN", "user_sessions", "user-67890", True,
                          {"ip_address": "192.168.1.100"})

    print("üìã Logged various structured messages:")
    print("   ‚Ä¢ Application startup with version info")
    print("   ‚Ä¢ User request with context")
    print("   ‚Ä¢ Performance metrics")
    print("   ‚Ä¢ Security events")
    print("   ‚Ä¢ Audit trail entries")
    print()

    logger.clear_request_context()


def demo_mock_structured_logging():
    """Mock demonstration of structured logging"""
    print("üìù Mock Structured Logging Demo:")

    # Sample JSON log entries
    log_samples = [
        {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "service": "fedzk-demo",
            "level": "INFO",
            "message": "User login successful",
            "structured_data": {
                "user_id": "user-123",
                "action": "login",
                "method": "POST",
                "request_id": "req-abc123"
            }
        },
        {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "service": "fedzk-demo",
            "level": "WARNING",
            "message": "High memory usage detected",
            "structured_data": {
                "memory_percent": 85.5,
                "threshold": 80.0,
                "component": "coordinator"
            }
        },
        {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "service": "fedzk-demo",
            "level": "ERROR",
            "message": "Database connection failed",
            "exception": "ConnectionTimeout: Connection to database timed out",
            "structured_data": {
                "database_host": "db.internal",
                "timeout_seconds": 30,
                "retry_count": 3
            }
        }
    ]

    for log_entry in log_samples:
        print(f"   {json.dumps(log_entry, indent=2)[:200]}...")

    print()


def demo_log_aggregation():
    """Demonstrate log aggregation and analysis"""
    print("üîç DEMO: Log Aggregation & Analysis")
    print("=" * 50)

    if not LOGGING_AVAILABLE:
        print("‚ö†Ô∏è  Log aggregation not available - using mock demonstration")
        demo_mock_aggregation()
        return

    # Initialize aggregator
    aggregator = LogAggregator(retention_hours=1)

    print("‚úÖ Initialized log aggregator")

    # Simulate log entries
    sample_logs = [
        {"level": "INFO", "message": "User login", "service": "auth", "timestamp_epoch": time.time()},
        {"level": "INFO", "message": "Database query", "service": "db", "timestamp_epoch": time.time()},
        {"level": "WARNING", "message": "High memory usage", "service": "coordinator", "timestamp_epoch": time.time()},
        {"level": "ERROR", "message": "Connection timeout", "service": "db", "timestamp_epoch": time.time()},
        {"level": "ERROR", "message": "Authentication failed", "service": "auth", "timestamp_epoch": time.time()},
        {"level": "INFO", "message": "ZK proof generated", "service": "zk", "timestamp_epoch": time.time()},
    ]

    print("üìä Aggregating sample log entries...")
    for log_entry in sample_logs:
        aggregator.aggregate_log(log_entry)
        time.sleep(0.01)  # Small delay for timestamps

    # Get statistics
    stats = aggregator.get_statistics(1)  # Last hour

    print("üìà Aggregation Statistics:")
    print(f"   ‚Ä¢ Total logs: {stats['total_logs']}")
    print("   ‚Ä¢ Logs by level:")
    for level, count in stats['logs_by_level'].items():
        print(f"     - {level}: {count}")
    print("   ‚Ä¢ Logs by service:")
    for service, count in stats['logs_by_service'].items():
        print(f"     - {service}: {count}")

    # Show error patterns
    if aggregator.error_patterns:
        print("   ‚Ä¢ Error patterns detected:")
        for pattern, count in aggregator.error_patterns.items():
            print(f"     - {pattern}: {count}")

    # Show anomalies
    anomalies = aggregator._detect_anomalies(time.time() - 3600)
    if anomalies:
        print(f"   ‚Ä¢ Anomalies detected: {len(anomalies)}")
        for anomaly in anomalies[:2]:  # Show first 2
            print(f"     - {anomaly['type']}: {anomaly['description']}")

    print()


def demo_mock_aggregation():
    """Mock demonstration of log aggregation"""
    print("üîç Mock Log Aggregation Demo:")

    mock_stats = {
        "total_logs": 1250,
        "logs_by_level": {"INFO": 850, "WARNING": 150, "ERROR": 200, "CRITICAL": 50},
        "logs_by_service": {"coordinator": 400, "mpc": 350, "zk": 300, "auth": 200},
        "error_patterns": {"connection_error": 45, "timeout_error": 32, "auth_error": 28},
        "performance_insights": {
            "avg_response_time": 0.245,
            "error_rate": 0.032,
            "throughput": 125.5
        }
    }

    print(f"   üìä Total logs processed: {mock_stats['total_logs']}")
    print("   üìã Breakdown by level:")
    for level, count in mock_stats['logs_by_level'].items():
        print(f"      {level}: {count}")

    print("   üîß Breakdown by service:")
    for service, count in mock_stats['logs_by_service'].items():
        print(f"      {service}: {count}")

    print("   ‚ö†Ô∏è  Error patterns detected:")
    for pattern, count in mock_stats['error_patterns'].items():
        print(f"      {pattern}: {count}")

    print("   üìà Performance insights:")
    perf = mock_stats['performance_insights']
    print(f"      Avg response time: {perf['avg_response_time']:.3f}s")
    print(f"      Error rate: {perf['error_rate']:.1%}")
    print(f"      Throughput: {perf['throughput']:.1f} req/s")

    print()


def demo_security_compliance():
    """Demonstrate security and compliance logging"""
    print("üîí DEMO: Security & Compliance Logging")
    print("=" * 50)

    if not LOGGING_AVAILABLE:
        print("‚ö†Ô∏è  Security logging not available - using mock demonstration")
        demo_mock_security()
        return

    # Initialize security logger
    security_logger = SecurityEventLogger("fedzk-security-demo")
    audit_logger = AuditLogger("fedzk-security-demo")

    print("‚úÖ Initialized security and audit loggers")

    # Log various security events
    print("üö® Logging security events...")

    # Authentication events
    auth_event_1 = security_logger.log_security_event(
        event_type=SecurityEventType.AUTHENTICATION_SUCCESS,
        user_id="user-123",
        source_ip="192.168.1.100",
        user_agent="Mozilla/5.0...",
        success=True,
        details={"method": "jwt", "session_duration": 3600}
    )

    auth_event_2 = security_logger.log_security_event(
        event_type=SecurityEventType.AUTHENTICATION_FAILURE,
        user_id="user-456",
        source_ip="10.0.0.50",
        success=False,
        details={"method": "password", "reason": "invalid_credentials"}
    )

    # Data access events
    data_event = security_logger.log_security_event(
        event_type=SecurityEventType.DATA_ACCESS,
        user_id="user-123",
        resource="user_profiles",
        action="READ",
        source_ip="192.168.1.100",
        success=True,
        details={"record_count": 25, "query_type": "SELECT"}
    )

    # Security violations
    violation_event = security_logger.log_security_event(
        event_type=SecurityEventType.SECURITY_VIOLATION,
        user_id="user-789",
        source_ip="203.0.113.1",
        resource="admin_panel",
        action="ACCESS",
        success=False,
        details={"violation_type": "unauthorized_access", "severity": "high"}
    )

    print("üîê Logged security events:")
    print(f"   ‚Ä¢ Authentication success: {auth_event_1}")
    print(f"   ‚Ä¢ Authentication failure: {auth_event_2}")
    print(f"   ‚Ä¢ Data access: {data_event}")
    print(f"   ‚Ä¢ Security violation: {violation_event}")

    # Log audit events
    print("\nüìã Logging audit events...")

    audit_1 = audit_logger.log_audit_entry(
        action="USER_LOGIN",
        resource="sessions",
        user_id="user-123",
        success=True,
        before_state=None,
        after_state={"status": "active", "login_time": datetime.utcnow().isoformat()}
    )

    audit_2 = audit_logger.log_audit_entry(
        action="PROFILE_UPDATE",
        resource="user_profiles",
        user_id="user-123",
        success=True,
        before_state={"email": "old@example.com"},
        after_state={"email": "new@example.com"},
        compliance_standards=[ComplianceStandard.GDPR]
    )

    print("üìù Logged audit events:")
    print(f"   ‚Ä¢ User login: {audit_1}")
    print(f"   ‚Ä¢ Profile update: {audit_2}")

    # Generate compliance report
    compliance_report = security_logger.generate_compliance_report(7)
    print("\nüìä Compliance Report (last 7 days):")
    print(f"   ‚Ä¢ Total events: {compliance_report['total_events']}")
    print(f"   ‚Ä¢ Compliance violations: {sum(std['violations'] for std in compliance_report['compliance_summary'].values())}")

    print()


def demo_mock_security():
    """Mock demonstration of security logging"""
    print("üîí Mock Security & Compliance Demo:")

    mock_events = [
        {
            "event_type": "authentication_success",
            "user_id": "user-123",
            "source_ip": "192.168.1.100",
            "compliance": {"gdpr": True, "pci_dss": True, "hipaa": True},
            "severity": "info"
        },
        {
            "event_type": "authentication_failure",
            "user_id": "user-456",
            "source_ip": "10.0.0.50",
            "compliance": {"gdpr": True, "pci_dss": False, "hipaa": True},
            "severity": "medium"
        },
        {
            "event_type": "data_access",
            "user_id": "user-123",
            "resource": "user_profiles",
            "action": "READ",
            "severity": "low"
        },
        {
            "event_type": "security_violation",
            "user_id": "user-789",
            "violation_type": "unauthorized_access",
            "severity": "high"
        }
    ]

    mock_audit = [
        {
            "action": "USER_LOGIN",
            "resource": "sessions",
            "user_id": "user-123",
            "success": True,
            "compliance_standards": ["gdpr", "sox"]
        },
        {
            "action": "PROFILE_UPDATE",
            "resource": "user_profiles",
            "user_id": "user-123",
            "success": True,
            "changes": {"email": "old@example.com ‚Üí new@example.com"},
            "compliance_standards": ["gdpr"]
        }
    ]

    print("   üö® Security Events:")
    for event in mock_events:
        severity_icon = {"info": "‚ÑπÔ∏è", "low": "üü¢", "medium": "üü°", "high": "üî¥"}.get(event.get("severity"), "‚ùì")
        print(f"      {severity_icon} {event['event_type']}")

    print("   üìã Audit Events:")
    for audit in mock_audit:
        status_icon = "‚úÖ" if audit['success'] else "‚ùå"
        print(f"      {status_icon} {audit['action']} on {audit['resource']}")

    print("   üìä Compliance Status:")
    print("      ‚úÖ GDPR: 2/2 compliant")
    print("      ‚ö†Ô∏è  PCI DSS: 1/2 compliant")
    print("      ‚úÖ HIPAA: 2/2 compliant")

    print()


def demo_helm_configuration():
    """Demonstrate Helm logging configuration"""
    print("‚öì DEMO: Helm Logging Configuration")
    print("=" * 50)

    print("üîß Sample Helm values for logging:")
    print("""
# Logging Configuration
logging:
  enabled: true
  level: "INFO"

  # Structured logging
  structured:
    enabled: true
    serviceName: "fedzk"

  # File logging
  file:
    enabled: true
    path: "/var/log/fedzk/app.log"
    maxSize: 10485760
    backupCount: 5

  # Security logging
  security:
    enabled: true
    auditTrail: true
    complianceCheck: true

  # Log aggregation
  aggregation:
    enabled: true
    bufferSize: 10000
    flushInterval: 30

  # External systems
  elasticsearch:
    enabled: true
    host: "elasticsearch-master"
    port: 9200
    username: "elastic"
    password: "changeme"
    ssl: true
    indexPrefix: "fedzk-logs"
    """)

    print("üìã Generated Kubernetes resources:")
    print("   ‚Ä¢ ConfigMap: fedzk-logging-config")
    print("   ‚Ä¢ Volume mounts for log files")
    print("   ‚Ä¢ Environment variables for logging")
    print("   ‚Ä¢ ServiceMonitor for log metrics")
    print()

    print("üöÄ Deployment commands:")
    print("   # Deploy with logging enabled")
    print("   helm install fedzk ./helm/fedzk \\")
    print("     --set logging.enabled=true \\")
    print("     --set logging.elasticsearch.enabled=true")
    print()


def demo_integration_example():
    """Show complete integration example"""
    print("üîó DEMO: Complete Logging Integration")
    print("=" * 50)

    print("üìù Example application integration:")

    integration_code = '''
# Initialize logging system
from fedzk.logging import (
    get_logger, get_security_logger, get_audit_logger,
    initialize_log_aggregation
)

# Initialize loggers
logger = get_logger("my-service")
security_logger = get_security_logger()
audit_logger = get_audit_logger()

# Initialize aggregation
pipeline = initialize_log_aggregation(
    elasticsearch_hosts=["elasticsearch:9200"]
)

# Log application events
logger.info("Application started", extra={
    "structured_data": {"version": "1.0.0"}
})

# Log with context
logger.set_request_context(
    request_id="req-123",
    user_id="user-456",
    source_ip="192.168.1.100"
)

logger.log_structured("info", "Processing request",
                     {"action": "process_data", "size": 1024})

# Security logging
security_logger.log_security_event(
    SecurityEventType.AUTHENTICATION_SUCCESS,
    user_id="user-456",
    source_ip="192.168.1.100",
    success=True
)

# Audit logging
audit_logger.log_audit_entry(
    action="DATA_PROCESSING",
    resource="user_data",
    user_id="user-456",
    success=True,
    compliance_standards=[ComplianceStandard.GDPR]
)

# Performance logging
logger.log_performance_metric(
    "data_processing", 0.245, True,
    {"records_processed": 1000}
)

# Clean up context
logger.clear_request_context()
'''

    print(integration_code)

    print("üéØ Integration Benefits:")
    print("   ‚úÖ Structured JSON logs for easy parsing")
    print("   ‚úÖ Security event tracking and compliance")
    print("   ‚úÖ Audit trail for regulatory requirements")
    print("   ‚úÖ Performance monitoring and alerting")
    print("   ‚úÖ Elasticsearch integration for advanced analytics")
    print("   ‚úÖ Kubernetes-native deployment configuration")
    print()


def main():
    """Run all logging infrastructure demos"""
    print("üìã FEDzk Logging Infrastructure Demo")
    print("=" * 70)
    print("This demo showcases the comprehensive logging system with:")
    print("‚Ä¢ Structured JSON logging with metadata")
    print("‚Ä¢ Log aggregation and analysis")
    print("‚Ä¢ Security and compliance logging")
    print("‚Ä¢ Audit trail generation")
    print("‚Ä¢ Helm integration and deployment")
    print()

    try:
        # Run all demos
        demo_structured_logging()
        demo_log_aggregation()
        demo_security_compliance()
        demo_helm_configuration()
        demo_integration_example()

        print("=" * 70)
        print("üéâ LOGGING INFRASTRUCTURE DEMO COMPLETED!")
        print("=" * 70)
        print()
        print("üìã IMPLEMENTATION SUMMARY:")
        print("‚úÖ Structured JSON logging with metadata")
        print("‚úÖ Log aggregation and real-time analysis")
        print("‚úÖ Security event logging and correlation")
        print("‚úÖ Audit trail generation and verification")
        print("‚úÖ Compliance checking (GDPR, PCI DSS, HIPAA, SOX)")
        print("‚úÖ Helm chart integration and configuration")
        print("‚úÖ Elasticsearch and Kibana integration")
        print("‚úÖ Kubernetes-native deployment support")
        print()
        print("üîß PRODUCTION FEATURES:")
        print("‚Ä¢ Log retention and rotation policies")
        print("‚Ä¢ Real-time anomaly detection")
        print("‚Ä¢ Performance metrics and alerting")
        print("‚Ä¢ Multi-level security classification")
        print("‚Ä¢ Cryptographic audit trail verification")
        print("‚Ä¢ ELK stack integration for advanced analytics")
        print()
        print("üöÄ READY FOR ENTERPRISE LOGGING!")

    except KeyboardInterrupt:
        print("\nüëã Demo interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Demo error: {e}")
        import traceback
        traceback.print_exc()
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
