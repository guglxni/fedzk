name: Secure Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (test or prod)'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - prod

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.1
      
      - name: Run tests with coverage
        run: pytest --cov=fedzk --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.3.0

  build:
    name: Build Package
    needs: quality-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package metadata
        run: twine check dist/*
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0.16.0
        with:
          format: spdx-json
          output-file: ./sbom.spdx.json
      
      - name: Run security scan
        uses: anchore/scan-action@v3
        with:
          path: ./dist
          fail-build: true
      
      - name: Store distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: |
            dist/
            sbom.spdx.json

  publish-testpypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'test' || startsWith(github.ref, 'refs/tags/')
    environment: testpypi
    permissions:
      id-token: write
    steps:
      - name: Download distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
      
      - name: Test installation from TestPyPI
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      
      - name: Install and verify package
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ fedzk==${VERSION}
          python -c "import fedzk; print(fedzk.__version__)"
          fedzk --help

  publish-pypi:
    name: Publish to PyPI
    needs: [build, publish-testpypi]
    runs-on: ubuntu-latest
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod') || startsWith(github.ref, 'refs/tags/')
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Download distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

  github-release:
    name: Create GitHub Release
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Get tag version
        id: tag
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Generate SLSA provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/*'
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: FedZK ${{ steps.tag.outputs.version }}
          files: |
            dist/*.tar.gz
            dist/*.whl
            dist/sbom.spdx.json
          generate_release_notes: true 