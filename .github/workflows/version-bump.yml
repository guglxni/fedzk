name: Version Bump

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Type of bump (patch, minor, major)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      pre_release_tag:
        description: "Pre-release tag (none, dev, alpha, beta, rc)"
        required: true
        default: "none"
        type: choice
        options:
          - none
          - dev
          - alpha
          - beta
          - rc

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This is important for git history and versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bumpversion
          pip install pre-commit
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump stable version
        if: ${{ inputs.pre_release_tag == 'none' }}
        run: |
          if [ "${{ inputs.bump_type }}" == "patch" ]; then
            bumpversion patch
          elif [ "${{ inputs.bump_type }}" == "minor" ]; then
            bumpversion minor
          elif [ "${{ inputs.bump_type }}" == "major" ]; then
            bumpversion major
          fi

      - name: Bump pre-release version
        if: ${{ inputs.pre_release_tag != 'none' }}
        run: |
          if [ "${{ inputs.bump_type }}" == "patch" ]; then
            bumpversion patch --new-version $(bumpversion patch --list | grep current_version | sed -r s,"^.*=",,)-${{ inputs.pre_release_tag }}.0
          elif [ "${{ inputs.bump_type }}" == "minor" ]; then
            bumpversion minor --new-version $(bumpversion minor --list | grep current_version | sed -r s,"^.*=",,)-${{ inputs.pre_release_tag }}.0
          elif [ "${{ inputs.bump_type }}" == "major" ]; then
            bumpversion major --new-version $(bumpversion major --list | grep current_version | sed -r s,"^.*=",,)-${{ inputs.pre_release_tag }}.0
          fi

      - name: Get new version
        id: get_version
        run: |
          echo "new_version=$(grep -m 1 "current_version =" .bumpversion.cfg | cut -d "=" -f2 | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: generate_changelog
        uses: janheinrichmerker/action-github-changelog-generator@v2.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          futureRelease: ${{ steps.get_version.outputs.new_version }}
          stripHeaders: true
          stripGeneratorNotice: true
          issuesLabel: "**Closed issues:**"
          prLabel: "**Merged pull requests:**"
          issues: true
          pullRequests: true
          author: true
        
      - name: Commit and push changelog if changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git add CHANGELOG.md
            git commit -m "Update CHANGELOG.md for version ${{ steps.get_version.outputs.new_version }}"
            git push origin HEAD
          else
            echo "No changes to commit"
          fi