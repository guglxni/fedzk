# FEDzk Production Environment
# Docker Compose configuration for production deployment

version: '3.8'

services:
  # ==========================================
  # FEDzk Coordinator Service
  # ==========================================
  fedzk-coordinator:
    image: fedzk:latest
    container_name: fedzk-coordinator-prod
    ports:
      - "8000:8000"
      - "8443:8443"
    environment:
      - FEDZK_ENV=production
      - FEDZK_ZK_VERIFIED=true
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - COORDINATOR_HOST=0.0.0.0
      - COORDINATOR_PORT=8000
      - MPC_SERVER_HOST=mpc-server
      - MPC_SERVER_PORT=8001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://fedzk_user:fedzk_password_prod@postgres:5432/fedzk_prod
    networks:
      - fedzk-network
    depends_on:
      - mpc-server
      - redis
      - postgres
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('/app'); print('Health check')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    volumes:
      - logs:/app/logs
    restart: unless-stopped

  # ==========================================
  # MPC Server Service
  # ==========================================
  mpc-server:
    image: fedzk:latest
    container_name: fedzk-mpc-prod
    ports:
      - "8001:8000"
    environment:
      - FEDZK_ENV=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - MPC_API_KEYS=${MPC_API_KEYS}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://fedzk_user:fedzk_password_prod@postgres:5432/fedzk_prod
    networks:
      - fedzk-network
    depends_on:
      - redis
      - postgres
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    volumes:
      - logs:/app/logs
    restart: unless-stopped

  # ==========================================
  # ZK Toolchain Service
  # ==========================================
  zk-toolchain:
    image: fedzk/zk-toolchain:latest
    container_name: fedzk-zk-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - CIRCOM_HOME=/zk
    networks:
      - fedzk-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "circom", "--version"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    volumes:
      - zk-artifacts:/zk/artifacts
    restart: unless-stopped

  # ==========================================
  # Redis Cache Service
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: fedzk-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fedzk-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru

  # ==========================================
  # PostgreSQL Database
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: fedzk-postgres-prod
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=fedzk_prod
      - POSTGRES_USER=fedzk_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fedzk-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fedzk_user -d fedzk_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # ==========================================
  # Nginx Reverse Proxy
  # ==========================================
  nginx:
    image: nginx:1.25-alpine
    container_name: fedzk-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs:/var/log/nginx
    networks:
      - fedzk-network
    depends_on:
      - fedzk-coordinator
      - mpc-server
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # ==========================================
  # Monitoring Stack
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: fedzk-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fedzk-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: fedzk-grafana-prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - fedzk-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # ==========================================
  # Log Aggregation
  # ==========================================
  loki:
    image: grafana/loki:latest
    container_name: fedzk-loki-prod
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - fedzk-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

# ==========================================
# Networks
# ==========================================
networks:
  fedzk-network:
    driver: bridge
    name: fedzk-prod-network
    driver_opts:
      com.docker.network.bridge.name: fedzk-bridge

# ==========================================
# Volumes
# ==========================================
volumes:
  redis_data:
    name: fedzk-redis-prod-data
    driver_opts:
      type: tmpfs
      device: tmpfs
  postgres_data:
    name: fedzk-postgres-prod-data
  prometheus_data:
    name: fedzk-prometheus-prod-data
  grafana_data:
    name: fedzk-grafana-prod-data
  loki_data:
    name: fedzk-loki-prod-data
  logs:
    name: fedzk-logs-prod
  zk-artifacts:
    name: fedzk-zk-artifacts-prod

